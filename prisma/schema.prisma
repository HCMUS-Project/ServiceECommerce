// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource commerce_db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model Product {
  id          String    @id @default(uuid())
  domain      String    @default("")
  name        String
  price       Decimal   @commerce_db.Decimal(19, 2)
  quantity    Int
  tenant_id   String
  description String
  image       String[]
  views       Int
  rating      Decimal   @commerce_db.Decimal(19, 1)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  reviews   Review[]
  cartItems CartItem[]

  // Define the many-to-many relationship with categories through a junction table
  categories ProductCategory[]

  @@unique([domain, name], name: "unique_product_domain_name")
}

model Category {
  id          String    @id @default(uuid())
  domain      String    @default("")
  name        String
  description String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  vouchers        Voucher[]
  ProductCategory ProductCategory[]

  @@unique([domain, name], name: "unique_category_domain_name")
}

model ProductCategory {
  id       String   @id @default(uuid())
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  name      String @default("")
  productId  String
  categoryId String

  @@unique([productId, categoryId])
}

model Cart {
  id          String     @id @default(uuid())
  domain      String
  user_id     String
  cartItems   CartItem[]
  total_price Decimal    @commerce_db.Decimal(19, 2)
  status      String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  deleted_at  DateTime?
}

model CartItem {
  id         String  @id @default(uuid())
  cart_id    String
  product_id String
  quantity   Int
  cart       Cart    @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([cart_id, product_id])
}

model Order {
  id                 String   @id @default(uuid())
  domain             String
  user_id            String
  product_ids        String[]
  product_quantities Int[]
  total_price        Decimal  @commerce_db.Decimal(19, 2)
  status             String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model Voucher {
  id               String   @id @default(uuid())
  domain           String
  voucher_name     String
  voucher_code     String
  max_discount     Decimal  @commerce_db.Decimal(19, 2)
  min_app_value    Decimal  @commerce_db.Decimal(19, 2)
  discount_percent Decimal  @commerce_db.Decimal(19, 2)
  expire_at        DateTime

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
}

model Review {
  id         String  @id @default(uuid())
  domain     String
  product_id String
  user_id    String
  rating     Decimal @commerce_db.Decimal(19, 1)
  review     String

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  product Product @relation(fields: [product_id], references: [id])
}
